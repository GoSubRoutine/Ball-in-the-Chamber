new Processing(pjs,
((function(Sketch) {
var sketch = new Sketch(
// this code was autogenerated from PJS
(function($p) {
var Ball = (function() {
function Ball() {
var $this_1 = this;
function $superCstr(){$p.extendClassChain($this_1)}
$p.defineProperty($this_1, 'DIM', {get: function(){return Ball.DIM}, set: function(val){Ball.DIM = val}});
$p.defineProperty($this_1, 'RAD', {get: function(){return Ball.RAD}, set: function(val){Ball.RAD = val}});
$p.defineProperty($this_1, 'MIN_SPD', {get: function(){return Ball.MIN_SPD}, set: function(val){Ball.MIN_SPD = val}});
$p.defineProperty($this_1, 'MAX_SPD', {get: function(){return Ball.MAX_SPD}, set: function(val){Ball.MAX_SPD = val}});
$p.defineProperty($this_1, 'INIT_FILL', {get: function(){return Ball.INIT_FILL}, set: function(val){Ball.INIT_FILL = val}});
$this_1.x =  Ball.DIM;
$this_1.y =  Ball.DIM;
$this_1.vx =  1;
$this_1.vy =  1;
$this_1.c =  Ball.INIT_FILL;
function respawn$0() {
var d =  Ball.DIM << 1,w =  $p.width - d,h =  $p.height - d;

    $this_1.x =  $p.__int_cast($p.random(d, w));
    $this_1.y =  $p.__int_cast($p.random(d, h));

    $this_1.vx =  $p.__int_cast($p.random(Ball.MIN_SPD, Ball.MAX_SPD)) * ($p.random(1) < .5? -1 : 1);
    $this_1.vy =  $p.__int_cast($p.random(Ball.MIN_SPD, Ball.MAX_SPD)) * ($p.random(1) < .5? -1 : 1);

    $this_1.c = Ball.INIT_FILL;

    return $this_1.$self;
}
$p.addMethod($this_1, 'respawn', respawn$0, false);
function script$0() {
return $this_1.$self.update().display();
}
$p.addMethod($this_1, 'script', script$0, false);
function update$0() {
if (($this_1.x += $this_1.vx) > $p.width  - Ball.RAD | $this_1.x < Ball.RAD)  $this_1.vx *= -1;
    if (($this_1.y += $this_1.vy) > $p.height - Ball.RAD | $this_1.y < Ball.RAD)  $this_1.vy *= -1;
    return $this_1.$self;
}
$p.addMethod($this_1, 'update', update$0, false);
function display$0() {
$p.fill($this_1.c);
    $p.ellipse($this_1.x, $this_1.y, Ball.DIM, Ball.DIM);
    return $this_1.$self;
}
$p.addMethod($this_1, 'display', display$0, false);
function colliding$1(c) {
return sq(c.x + Chamber.RAD - $this_1.x) + sq(c.y + Chamber.RAD - $this_1.y)
      < sq(Chamber.RAD + Ball.RAD);
}
$p.addMethod($this_1, 'colliding', colliding$1, false);
function $constr() {
$superCstr();
}
$constr.apply(null, arguments);
}
Ball.DIM =  25;
Ball.RAD =  Ball.DIM >> 1;
Ball.MIN_SPD =  2;
Ball.MAX_SPD =  6 + 1;
Ball.INIT_FILL =  -1;
return Ball;
})();
$p.Ball = Ball;
var Chamber = (function() {
function Chamber() {
var $this_1 = this;
function $superCstr(){$p.extendClassChain($this_1)}
$p.defineProperty($this_1, 'DIM', {get: function(){return Chamber.DIM}, set: function(val){Chamber.DIM = val}});
$p.defineProperty($this_1, 'RAD', {get: function(){return Chamber.RAD}, set: function(val){Chamber.RAD = val}});
$this_1.x = 0;
$this_1.y = 0;
$this_1.c = 0x00000000;
function display$0() {
$p.fill($this_1.c);
    $p.rect($this_1.x, $this_1.y, Chamber.DIM, Chamber.DIM);
}
$p.addMethod($this_1, 'display', display$0, false);
function $constr_3(x, y, c){
$superCstr();

$this_1.x = x;
    $this_1.y = y;
    $this_1.c = c;
}

function $constr() {
if(arguments.length === 3) { $constr_3.apply($this_1, arguments); } else $superCstr();
}
$constr.apply(null, arguments);
}
Chamber.DIM =  40;
Chamber.RAD =  Chamber.DIM >> 1;
return Chamber;
})();
$p.Chamber = Chamber;

var BALLS =  4;
var balls =  $p.createJavaArray('Ball', [BALLS]);

var CHAMBERS =  8;
var chambers =  $p.createJavaArray('Chamber', [CHAMBERS]);

var BG =  0350,OUTLINE =  0;
var WEIGHT =  2;

function setup() {
$p.size(640, 440);

  if (window.adjustFrameSize)  window.adjustFrameSize();
console.log($p, $p.externals);
console.log($p.externals.sketch.toString());
  $p.ellipseMode($p.CENTER);
  $p.rectMode($p.CORNER);
  $p.colorMode($p.RGB);

  $p.strokeWeight(WEIGHT);
  $p.stroke(OUTLINE);

  for (var i =  0;  i < BALLS;  balls[i++] = new Ball().respawn());

  var bo =  $p.round(WEIGHT/2),dim =  Chamber.DIM + bo,wx =  $p.width - dim,hy =  $p.height - dim,cx =  wx >> 1,cy =  hy >> 1;

  chambers[0] = new Chamber(bo, bo, 0xFFFF0000);    chambers[1] = new Chamber(wx, bo, 0xFF00FF7F);    chambers[2] = new Chamber(bo, hy, 0xFF0000FF);    chambers[3] = new Chamber(wx, hy, 0xFFFFC0CB);    chambers[4] = new Chamber(cx, bo, 0xFFFFFF00);    chambers[5] = new Chamber(cx, hy, 0xFF00FFFF);    chambers[6] = new Chamber(bo, cy, 0xFFFA9600);    chambers[7] = new Chamber(wx, cy, 0xFFFF00FF);
}
$p.setup = setup;
setup = setup.bind($p);

function draw() {
$p.background(BG);

  for (var $it0 = new $p.ObjectIterator( balls), b  = void(0); $it0.hasNext() && ((b  = $it0.next()) || true);) {
for (var $it1 = new $p.ObjectIterator( chambers), c  = void(0); $it1.hasNext() && ((c  = $it1.next()) || true);)  if (b.colliding(c)) {
b.c = c.c;
      break;
}

    b.script();
}

  for (var $it2 = new $p.ObjectIterator( chambers), c  = void(0); $it2.hasNext() && ((c  = $it2.next()) || true);)  c.display();
}
$p.draw = draw;
draw = draw.bind($p);

function mousePressed() {
for (var $it3 = new $p.ObjectIterator( balls), b  = void(0); $it3.hasNext() && ((b  = $it3.next()) || true);)  b.respawn();
}
$p.mousePressed = mousePressed;
mousePressed = mousePressed.bind($p);

function sq(n) {
return n * n;
}
$p.sq = sq;
sq = sq.bind($p);

}));
sketch.options.pauseOnBlur = false;
sketch.options.globalKeyEvents = false;
return sketch;
})(Processing.Sketch))
);